import sqlite3
from recipient import Recipient
import os
class SQLConnector:
    def __init__(self):
        #Connect to database if it exists, create it if it does not.
        connection = sqlite3.connect("VulnerabilityTesterDB.db") 
        crsr = connection.cursor()

        #Look up if the organizations table already exists, create it if not
        crsr.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='organizations';")
        if (len(crsr.fetchall()) == 0):
            
            #Create the organizations table
            create_table_command = """CREATE TABLE organizations (
            id INT AUTO_INCREMENT PRIMARY KEY,
            organization_email VARCHAR(128) NOT NULL UNIQUE,
            organization_name VARCHAR(128) NOT NULL,
            scam_clicks INT
            );"""

            crsr.execute(create_table_command)
            print("Created fresh db")
        else:
            print("Found existing db")


        #Commit and close
        connection.commit()
        connection.close()

    def get_organization_rows(self, organization : str) -> list[list[str, int]]: 
        connection = sqlite3.connect("VulnerabilityTesterDB.db") 
        crsr = connection.cursor()

        #Query database for all rows matching supplied organization
        crsr.execute(f"SELECT organization_email, scam_clicks FROM organizations WHERE organization_name='{organization}'")
        query_result = crsr.fetchall()

        #Commit and close
        connection.commit()
        connection.close()

        return query_result
    def get_recipient(self, recipient_email : str):
        connection = sqlite3.connect("VulnerabilityTesterDB.db") 
        crsr = connection.cursor()

        #Query database for all rows matching supplied email
        crsr.execute(f"SELECT * FROM organizations WHERE organization_email='{recipient_email}'")
        query_result = crsr.fetchall()

        #Commit and close
        connection.commit()
        connection.close()

        #List contains at most 1 elements since emails are unique, just return the topmost element or None
        if (len(query_result)):
            return query_result[0]
        return None
    def add_recipients(self, recipients : list[Recipient]):
        
        connection = sqlite3.connect("VulnerabilityTesterDB.db") 
        crsr = connection.cursor()

        try:
            for r in recipients:

                query = f"""INSERT INTO organizations (organization_email, organization_name, scam_clicks) 
                VALUES ('{r.email}', '{r.organization_name}', 0);"""

                crsr.execute(query)
        except sqlite3.IntegrityError: 
            print("User already existed in table")
        except:
            print("Failed to add user")
        #Commit and close
        connection.commit()
        connection.close()

    def get_organization_names(self) -> list[str]: 
        connection = sqlite3.connect("VulnerabilityTesterDB.db") 
        crsr = connection.cursor()

        crsr.execute("SELECT DISTINCT organization_name FROM organizations")
        organization_names = []

        organization_names_tuple = crsr.fetchall()
        for o in organization_names_tuple:
            organization_names.append(o[0])
        connection.close()
        return organization_names    

    
if __name__ == "__main__":
    #Reset db
    try:
        os.remove('VulnerabilityTesterDB.db')
    except:
        print("Could not find db to remove")