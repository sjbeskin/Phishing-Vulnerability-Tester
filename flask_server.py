from flask import Flask, jsonify, request, redirect, render_template
from flask_cors import CORS, cross_origin
from sqlconnector import SQLConnector, Recipient
import os
import json
import re
# Create Flask Server + Handle CORS
app = Flask(__name__)
cors = CORS(app)
app.config['CORS_HEADERS'] = 'Content-Type'

# Gets current location
__location__ = os.path.realpath(
os.path.join(os.getcwd(), os.path.dirname(__file__)))

# Handle requests going to the base link
# Gets the UUID from the link request and registers it in the database
@app.route('/', methods=['GET'])
@cross_origin
def test():
    try:
        uuid = request.args.get('id')
        sql_conn = SQLConnector()
        sql_conn.register_recipient_scam_click(uuid)
    except ValueError:
        #No id
        print("No id")
    return redirect('https://www.google.com', code=302)

# Link for adding a file containing the email recipients
# Opens an html page with the option to submit a file
@app.route('/addrecipient', methods=['GET', 'POST'])
def add_recipient():
    if request.method == 'POST':
        if 'file' not in request.files:
            print('NO FILE')
            return redirect('https://www.google.com')
        file = request.files['file']
        print(file.filename)
        file.save(file.filename)
        f = open(file.filename)
        jsonparsed = json.load(f)
        print(jsonparsed)

        #jsonparsed should be a list
        if type(jsonparsed) != list:
            print("Format error")
            return "Malformed Request", 400

        #Verify here that each item of the list is actually an email
        pattern = re.compile(r"^\S+@\S+\.\S+$")
        recipients = []
        for item in jsonparsed:
            if pattern.match(item['email']):
                print(item['email'])
                recipients.append(Recipient(item['email'], item['organization_name']))
            else:
                print('Bad Email')
        sqlconnector = SQLConnector()
        sqlconnector.add_recipients(recipients)
    return render_template('test.html')

@app.route('/getorganizations', methods=['GET'])
def get_organizations():
    #Return json list of all organizations

    sqlconn = SQLConnector()
    organizations = sqlconn.get_organization_names()

    return organizations

@app.route('/getorganizationrows', methods=['GET'])
def get_organization_rows():
    sqlconn = SQLConnector()
    organization_name : str = request.args.get('organization')
    serialized_organization_rows = []
    recipients = sqlconn.get_organization_rows(organization_name)
    for r in recipients:
        serialized_organization_rows.append(json.loads(r.toJSON()))
    print(serialized_organization_rows)
    return serialized_organization_rows
if __name__=='__main__':
    app.run(debug=True, port=8080)