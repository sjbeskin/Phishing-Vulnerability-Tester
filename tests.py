import unittest
from sqlconnector import SQLConnector, Recipient

from sqlconnector import SQLConnector
import os
from pathlib import Path
import sqlite3
import uuid



class TestSQLConnectorMethods(unittest.TestCase):

    def setUp(self):
        #Runs each time before a test
       
        self.sqlconn = SQLConnector(testing_mode=True)
    
    def test_db_creation(self):
        #Check the db exists and has nothing in it
        test_db_file = Path("TestingDB.db")
        self.assertTrue(test_db_file.is_file())

        connection = sqlite3.connect("TestingDB.db") 
        crsr = connection.cursor()

        crsr.execute(f"SELECT * FROM organizations")
        query_result = crsr.fetchall()
        self.assertEqual(len(query_result), 0)

        connection.close()
    def test_add_recipient(self):
        #assemble input list of 200 recipients spread across 2 organizations.

        recipient_input : list[Recipient] = []
        for i in range(100):
            recipient_input.append(Recipient(f"{uuid.uuid4()}@example1.com", "example1"))
        for i in range(100):
            recipient_input.append(Recipient(f"{uuid.uuid4()}@example2.com", "example2"))

        self.sqlconn.add_recipients(recipient_input)

        connection = sqlite3.connect("TestingDB.db") 
        crsr = connection.cursor()

        crsr.execute(f"SELECT * FROM organizations")
        query_result = crsr.fetchall()
        self.assertEqual(len(query_result), 200)
        
        crsr.execute(f"SELECT * FROM organizations WHERE organization_name='example1'")
        query_result = crsr.fetchall()
        self.assertEqual(len(query_result), 100)

        crsr.execute(f"SELECT * FROM organizations WHERE organization_name='example2'")
        query_result = crsr.fetchall()
        
        self.assertEqual(len(query_result), 100)

        
        connection.close()
        
    def test_get_recipient(self):
        self.sqlconn.add_recipients([Recipient("user@example.com", "example.organization")])
        user = self.sqlconn.get_recipient("user@example.com")
        self.assertEqual(user[2], "example.organization")


    def test_get_organization_names(self):
        pass
    def test_get_organization_rows(self):
        pass
    def test_get_clicks(self):
        self.sqlconn.add_recipients([Recipient("user@example.com", "example.organization")])
        user = self.sqlconn.get_recipient("user@example.com")
        self.assertEqual(user[3], 0)

    def test_add_clicks(self):
        self.sqlconn.add_recipients([Recipient("user@example.com", "example.organization")])
        user = self.sqlconn.get_recipient("user@example.com")
        self.sqlconn.register_recipient_scam_click(user[0])
        self.sqlconn.register_recipient_scam_click(user[0])
        self.sqlconn.register_recipient_scam_click(user[0])
        user = self.sqlconn.get_recipient("user@example.com")
        self.assertEqual(user[3], 3)

if __name__ == '__main__':
    unittest.main()